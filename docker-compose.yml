version: '3'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", '-c', "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - streaming_pipeline

  broker:
    image: confluentinc/cp-kafka:7.4.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Thêm dòng này để bật tự động tạo topic
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: ["CMD", "bash", '-c', "nc -z localhost 9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - streaming_pipeline

  postgres:
    image: postgres:13.3
    container_name: postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: weather_db
    networks:
      - streaming_pipeline
    volumes:
      - ./psql_data:/var/lib/postgresql/data

  # web:
  #   build: .
  #   container_name: django_web
  #   # command: sh -c "python manage.py migrate && gunicorn --bind 0.0.0.0:8000 weather_app.wsgi:application"
  #   command: python manage.py runserver 0.0.0.0:8000
  #   command: python /code/manage.py runserver 0.0.0.0:8000
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     - postgres
  #   env_file:
  #     - .env
  #   environment:
  #     - DB_NAME=weather_db
  #     - DB_USER="postgres"
  #     - DB_PASSWORD="postgres"
  #     - DB_HOST=postgres
  #     - DB_PORT=5433
  #     - KAFKA_BOOTSTRAP_SERVERS=broker:29092
  #   volumes:
  #     - .:/app
  #   networks:
  #     - streaming_pipeline

networks:
  streaming_pipeline:
    driver: bridge
